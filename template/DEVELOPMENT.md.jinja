# Development Guide for {{ project_name }}

## Table of Contents
- [Quick Start](#quick-start)
- [Code Quality Tools](#code-quality-tools)
- [Pre-commit Hooks](#pre-commit-hooks)
- [Managing Dependencies](#managing-dependencies)
- [Customizing the Application Logo](#customizing-the-application-logo)
- [Release Process](#release-process)

## Quick Start

1. **Install Poetry** (if not already installed):
   ```bash
   pip install poetry
   ```

2. **Install dependencies**:
   ```bash
   poetry install
   ```

3. **Run the application**:
   ```bash
   poetry run {{ project_name }}
   ```

4. **Build executable**:
   ```bash
   poetry run pyinstaller {{ project_name }}.spec
   ```
The built executable will be in the `dist` directory.

### Code Quality Tools

This project uses several tools to maintain code quality:

```bash
# Format code (Black + isort)
poetry run black .
poetry run isort .

# Check code quality (Pylint)
poetry run pylint src
```


### Pre-commit Hooks

We use pre-commit hooks to automatically check code quality on commits.

**Setup**:
```bash
poetry run pre-commit install
```

**Manual run**:
```bash
poetry run pre-commit run --all-files
```

**Skip hooks if needed**:
```bash
git commit -m "message" --no-verify  # Skip all hooks
SKIP=black,isort git commit -m "message"  # Skip specific hooks
```

### Managing Dependencies

**Add a production dependency**:
```bash
poetry add package_name
```

**Add a development dependency**:
```bash
poetry add --group dev package_name
```

**Update all dependencies**:
```bash
poetry update
```

**Export dependencies to requirements.txt** (if needed):
```bash
poetry export -f requirements.txt --output requirements.txt
```

### Customizing the Application Logo

To replace the default application logo with your own:

1. **Prepare your logo**
   - Create or prepare your logo image with these specifications:
     - Format: PNG with transparency
     - Size: 256x256 pixels (recommended)
     - Filename: `logo.png`

2. **Place the logo**
   - Locate the assets directory in your project:
     ```bash
     {{ project_name }}/src/assets/
     ```
   - Replace the existing `logo.png` in this directory with your new logo

3. **Verify the change**
   - Run the application to check if the logo appears correctly:
     ```bash
     poetry run {{ project_name }}
     ```
   - If building an executable, rebuild to include the new logo:
     ```bash
     poetry run pyinstaller {{ project_name }}.spec
     ```

## Release Process

This project uses GitHub Actions to automatically build and publish binaries when a new version tag is pushed. To create a new release:

1. Update the version in `pyproject.toml`:
   ```toml
   [tool.poetry]
   version = "x.y.z"  # Update this version
   ```

2. Create and push a new tag:
   ```bash
   git tag vx.y.z # Create a new tag
   git push origin vx.y.z # Push the tag to GitHub
   ```

GitHub Actions will automatically:
   - Build binaries for Windows, Linux, and macOS
   - Create a new release on GitHub
   - Attach the binaries to the release

**Remove tag if needed**:
```bash
git tag -d vx.y.z  # Local
git push --delete origin vx.y.z  # Remote
```